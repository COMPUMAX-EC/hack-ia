#!/usr/bin/env python3
"""
Script de prueba para verificar la integraci√≥n de LangChain
"""
import asyncio
import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent))

from api.services.langchain_service import LangChainService

async def test_langchain_integration():
    """Probar la integraci√≥n de LangChain"""
    print("üß™ Iniciando pruebas de LangChain...")
    
    # Crear instancia del servicio
    langchain_service = LangChainService()
    
    # Prueba 1: An√°lisis de licitaci√≥n
    print("\nüìÑ Prueba 1: An√°lisis de Licitaci√≥n")
    document_content = """
    PROPUESTA T√âCNICA PARA LICITACI√ìN P√öBLICA N¬∞ 001-2025
    
    1. OBJETO DEL CONTRATO
    Suministro e instalaci√≥n de sistema de gesti√≥n documental para entidad p√∫blica.
    
    2. ESPECIFICACIONES T√âCNICAS
    - Sistema web moderno con base de datos PostgreSQL
    - Interfaz responsive compatible con dispositivos m√≥viles
    - Capacidad para 10,000 documentos simult√°neos
    - Integraci√≥n con sistemas existentes
    
    3. EXPERIENCIA DE LA EMPRESA
    Nuestra empresa tiene 8 a√±os de experiencia en desarrollo de software para el sector p√∫blico.
    Hemos implementado m√°s de 50 proyectos similares con √©xito.
    
    4. PROPUESTA ECON√ìMICA
    Valor total del proyecto: $85,000 USD
    Tiempo de implementaci√≥n: 6 meses
    Garant√≠a: 2 a√±os
    """
    
    try:
        result = await langchain_service.analyze_licitacion_document(
            document_content=document_content,
            document_type="Propuesta T√©cnica"
        )
        
        print(f"‚úÖ Puntuaci√≥n: {result.get('score', 'N/A')}")
        print(f"‚úÖ Nivel de riesgo: {result.get('risk_level', 'N/A')}")
        print(f"‚úÖ Tipo de documento: {result.get('document_type', 'N/A')}")
        print(f"‚úÖ Recomendaciones: {len(result.get('recommendations', []))} encontradas")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis de licitaci√≥n: {e}")
    
    # Prueba 2: An√°lisis crediticio
    print("\nüí∞ Prueba 2: An√°lisis Crediticio")
    company_data = {
        "company_name": "TechStart Solutions",
        "business_type": "Desarrollo de software y aplicaciones m√≥viles",
        "years_in_business": "4 a√±os",
        "monthly_revenue": "25000",
        "digital_presence": "Excelente presencia en redes sociales, sitio web profesional, testimonios positivos",
        "commercial_references": "5 referencias comerciales verificadas de clientes satisfechos"
    }
    
    try:
        result = await langchain_service.analyze_credit_risk(company_data)
        
        print(f"‚úÖ Puntuaci√≥n crediticia: {result.get('credit_score', 'N/A')}")
        print(f"‚úÖ Nivel de riesgo: {result.get('risk_level', 'N/A')}")
        print(f"‚úÖ Probabilidad de aprobaci√≥n: {result.get('approval_probability', 'N/A')}%")
        print(f"‚úÖ Presencia digital: {result.get('digital_presence_score', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis crediticio: {e}")
    
    # Informaci√≥n del sistema
    print("\nüîß Informaci√≥n del Sistema")
    if langchain_service.llm:
        print("‚úÖ LangChain configurado correctamente con OpenAI")
        print("‚úÖ Modelo: GPT-3.5-turbo")
        print("‚úÖ Temperatura: 0.3 (an√°lisis preciso)")
    else:
        print("‚ö†Ô∏è Funcionando en modo simulaci√≥n (sin OPENAI_API_KEY)")
        print("‚ÑπÔ∏è Para usar IA real, configura OPENAI_API_KEY en .env")
    
    print("\nüéâ Pruebas completadas!")

if __name__ == "__main__":
    asyncio.run(test_langchain_integration())
